INTRODUCTORY NOTES

- The American National Standards Institue established
  a committee whose goal was to produce an unambigous
  and machine-independent definition of the langauage c,
  while still retaining its original spirit. The result
  is the ANSI standard for C, the 1983 updated version.

- C is a general-purpose programming language which features
  economy of expression, modern control flow and data structures,
  and a rich set of operators. 

- C was originally designed for and implemented on the UNIX
  operating system by Dennis Ritchie.

- C was indirectly proceeded by the language B, which was
  written by Ken Thompson in 1970 for the first UNIX system.


CHAPTER 1: INTRODUCTION

1.1 GETTING STARTED

	
#include <stdio.h>

main() {

	printf("hello world");

}

Compiling - cc hello.c hello
Running - hello

#include <stdio.h>	includes information about the 
			standard libraby

main()			define a function named main
			that recieves no argument values

printf			main calls library function printf
			to print the sequence of characters.



1.2 Variables & Data types

A declaration announces the properties of variables; it consists
of a type name and a list of variables.

	
char 		1 byte 			-128 to 127 or 0 to 255

unsigned char 	1 byte 			 0 to 255

signed char 	1 byte 			-128 to 127

int 		2 or 4 bytes 		-32,768 to 32,767 or 
					-2,147,483,648 to 2,147,483,647

unsigned int 	2 or 4 bytes 		 0 to 65,535 or 0 to 4,294,967,295

short 		2 bytes 		-32,768 to 32,767

unsigned short 	2 bytes 		 0 to 65,535

long 		4 bytes 		-2,147,483,648 to 2,147,483,647

unsigned long 	4 bytes 		 0 to 4,294,967,295



%d 		print as decimal integer
%6d 		print as decimal integer, at least 6 characters wide
%f 		print as floating point
%6f 		print as floating point, at least 6 characters wide
%.2f 		print as floating point, 2 characters after decimal point
%6.2f 		print as floating point, at least 6 wide and 2 after decimal point

1.3 The FOR statement and WHILE loop

The while loop operates as follows: The condition in parentheses is tested. If
it is true (fahr is less than or equal to upper), the body of the loop (the three
statements enclosed in braces) is executed. Then the condition is re-tested, and
if true, the body is executed again.

while (1) {
 /* action */		an infinite loop
}

The for statement is also a loop. The first part is the initialization, the second
part is the test or condition that controls the loop. If the condition
is evaluated true, the body of the loop is executed.


for (i = 0; i < 10; i++) {

	printf("text");

}

1.4 Symblic Constants and Operators

A #define line defines a symbolic name or symbolic constant
to be a particular string of characters.

#define AGE 		22
#define BIRTHDATE	1993
#define DATEOFBIRTH	3


Arithmetic Operators

+ 	Adds two operands. 						A + B = 30

- 	Subtracts second operand from the first. 			A - B = 10

* 	Multiplies both operands. 					A * B = 200

/ 	Divides numerator by de-numerator. 				B / A = 2

% 	Modulus Operator and remainder of after an integer division. 	B % A = 0

++ 	Increment operator increases the integer value by one. 		A++ = 11

-- 	Decrement operator decreases the integer value by one. 		A-- = 9

Relational Operators

== 	Checks if the values of two operands are equal or not. 
	If yes, then the condition becomes true. 			(A == B) is not true.

!= 	Checks if the values of two operands are equal or not. 
	If the values are not equal, then the condition becomes true. 	(A != B) is true.

> 	Checks if the value of left operand is greater than the value of right operand. 
	If yes, then the condition becomes true. 			(A > B) is not true.

< 	Checks if the value of left operand is less than the value of right operand. 
	If yes, then the condition becomes true. 			(A < B) is true.

>= 	Checks if the value of left operand is greater than or equal to the value of right operand. 
	If yes, then the condition becomes true. 			(A >= B) is not true.

<= 	Checks if the value of left operand is less than or equal to the value of right operand. 
	If yes, then the condition becomes true. 			(A <= B) is true.

Logical Operators

&& 	Called Logical AND operator. 
	If both the operands are non-zero, then the condition becomes true. 	(A && B) is false.

|| 	Called Logical OR Operator. If any of the two operands is non-zero, then the condition becomes true. 	
										(A || B) is true.

! 	Called Logical NOT Operator. It is used to reverse the logical state of its operand. 
	If a condition is true, then Logical NOT operator will make it false. 	!(A && B) is true.

Bitwise Operators

& 	Binary AND Operator copies a bit to the result if it exists in both operands. 	
	(A & B) = 12, i.e., 0000 1100

| 	Binary OR Operator copies a bit if it exists in either operand. 	
	(A | B) = 61, i.e., 0011 1101

^ 	Binary XOR Operator copies the bit if it is set in one operand but not both. 	
	(A ^ B) = 49, i.e., 0011 0001

~ 	Binary Ones Complement Operator is unary and has the effect of 'flipping' bits. 	
	(~A ) = -61, i.e,. 1100 0011 in 2's complement form.

<< 	Binary Left Shift Operator. 
	The left operands value is moved left by the number of bits specified by the right operand. 	
	A << 2 = 240 i.e., 1111 0000

>> 	Binary Right Shift Operator. 
	The left operands value is moved right by the number of bits specified by the right operand. 	
	A >> 2 = 15 i.e., 0000 1111

Assignment Operators

= 	Simple assignment operator. Assigns values from right side operands to left side operand 	
	C = A + B will assign the value of A + B to C

+= 	Add AND assignment operator. 
	It adds the right operand to the left operand and assign the result to the left operand. 	
	C += A is equivalent to C = C + A

-= 	Subtract AND assignment operator. 
	It subtracts the right operand from the left operand and assigns the result to the left operand. 	
	C -= A is equivalent to C = C - A

*= 	Multiply AND assignment operator. 
	It multiplies the right operand with the left operand and assigns the result to the left operand. 	
	C *= A is equivalent to C = C * A

/= 	Divide AND assignment operator. 
	It divides the left operand with the right operand and assigns the result to the left operand. 
	C /= A is equivalent to C = C / A

%= 	Modulus AND assignment operator. It takes modulus using two operands and assigns the result to the left operand. 	
	C %= A is equivalent to C = C % A

<<= 	Left shift AND assignment operator. 	C <<= 2 is same as C = C << 2

>>= 	Right shift AND assignment operator. 	C >>= 2 is same as C = C >> 2

&= 	Bitwise AND assignment operator. 	C &= 2 is same as C = C & 2

^= 	Bitwise exclusive OR and assignment operator. 	C ^= 2 is same as C = C ^ 2

|= 	Bitwise inclusive OR and assignment operator. 	C |= 2 is same as C = C | 2

Misc Operators

sizeof() 	Returns the size of a variable. 	sizeof(a), where a is integer, will return 4.

& 		Returns the address of a variable. 	&a; returns the actual address of the variable.

* 		Pointer to a variable. 	*a;

? : 		Conditional Expression. 	If Condition is true ? then value X : otherwise value Y



1.5  Character Input and output

- A text stream is a sequence of characters divided into lines; each line consists of zero or more characters 
followed by a newline character.

- getchar() reads the next input character from the text stream and returns that as its value

File Copying

#include <stdio.h>

main() {
	int c;
	
	c = getchar();
	while (c != EOF) {		// Copies input to output
		putchar(c);
		c = getchar();
	}
}

- The relational operator '!=' means "not equal to"

- To distinguish the end of the input from valid data, the EOF value exists, "END OF FILE"

Character Counting

#include <stdio.h>

main() 
{

	long nc;
	nc = 0;
	while (getchar() != EOF) 
	++nc;
	printf("%ld\n", nc);
}

Line Counting

#include <stdio.h>

main()
{

	int c, nl;
	nl = 0;
	while ((c = getchar()) != EOF)
	if (c == '\n')
	++nl;
	printf("%d\n", nl);
}

Word Counting

#include <stdio.h>

#define IN  1
#define OUT 0

main () {
	int c, nl, nw, nc, state;
	
	state = OUT;
	
	nl = nw = nc = 0;
	
	while ((c = getchar()) != EOF) {
		++nc;
		if (c == '\n')
			++nl;
		if (c == ' ' || c == '\n' || c == '\t')
			state = OUT;
			else if(state == OUT) {
				state = IN;
				++nw;
			}
	}
	printf("%d %d %d\n", nl, nw, nc);
}


1.6 Arrays


Arrays a kind of data structure that can store a fixed-size sequential collection
of elements of the same type. an array is used to store a collection of data, but
it is often more useful to think of an array as a collection of variables of the 
same type.


#include <stdio.h>

int main() {
	int i;
	int a[10];	// declaring the array
	
	for ( i = 0; i < 10; i++) {
		printf("Array[%d]\n", a[i]);
	}
}


1.7 Functions

A function provides a convenient way to encapsulate some computation, which can be
used without worrying about its implementation.


#include <stdio.h>

int main() {
	int a = 100;
	int b = 200;
	int maxvalue;
	
	maxvalue = max(a, b);	// calling the function, passing the value of 'a' to function 'b', with its temp 
			           variables being num1 and num2
	
	printf("Max value is: %d\n", maxvalue);
	
}

int max(int num1, int num2) {	// defining the function
	int result;
	if(num1 > num2) {
		result = num1;
	}
	else {
		result = num2;
	}
	return result;
}

1.8 Arguments--Call by Value

-The call by value method of passing arguments to a function copies the 
actual value of an argument into the formal parameter of the function.

- see notes above

1.9 Character Arrays

 Before the string class, the abstract idea of a string was implemented with just an array of characters. 
For example, here is a string:

    char label[] = "Single";

What this array looks like in memory is the following:

    ------------------------------
    | S | i | n | g | l | e | \0 |
    ------------------------------

where the beginning of the array is at some location in computer memory

#include <stdio.h>

int main () {

   char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\0'};
   printf("Greeting message: %s\n", greeting );
   return 0;
}

1.10 External variables and Scope

- Each local variable in a function comes into existence only when the function is called,
and disappears when the function is exited
